Day 1: 
Eclipse introduction 
why Git used
Git concepts
Eclipse shortcuts
*************************************************************************************************

Day 2:
Eclipse perspective
Properties 
Eclipse walkthrough 
*************************************************************************************************

Day 3:
Creating a Java project and Maven project 
Pushing it to Git
Import from GIT 
Pull and push concepts 
*************************************************************************************************

Day 4:
Java introduction
explanation about project, package, class, method, constructors
why object creation
Public and static keywords

*************************************************************************************************
Day 6 - 10/04/2024 and Day 7 - 11/04/2024
Project
	package1
		InterfaceA
		ClassA (Datatype/variables/methods)
			ClassAA 
			ClassAB
		ClassB
		ClassC
	package2
		ClassA
		ClassB
	package3
		ClassX
		ClassA
		

* Class - It does a set of work. It consist of variables and methods. Each work would be done by methods. 

* Methods - It does specific job. It always written inside a class

* Variable - it can have type(Data type) and posses a number or name;
			variables can have different access - access Modifier
			
* Access Modifier - difines where we can use a variable/method/class

* Interface - It contains rules most of the time. Sometimes it does some work too(means method).
			Interface is always followed by class/classes. 
			When class follows interface, class should do as per the rules written in the interface. Other than that
			class can do its own work.

* package - contains class/classes/interface/interfaces/file/files/folder/folders

* Project - consist of package/packages/file/files/folder/folders/source(src)folder

* static - static means belongs to the class. If govt hospital is class, 
			then hospital receptionist is a static member of that class,
			We can not seperate them 
			variables and methods can be static
			within a class - static can be used anywhere directly (in a static method or in non-static method)
			Outside calss - static can be used but alone with class name. (in a static method or in non-static method)

* Object (instatiation or initiation)  - E.g: Medical camp; 
			We create Object only for classes; Whenever we create object we copy whatever the class contains(except static)
			means, only non-static is copied
			Through object we can not call static things.

* Constructor - Object creation happens with the help of constructor
				constructor is available in different kind
				1. without any money/permission
				2. only with money
				3. only with permission
				4. with both money and permission
				
				
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Class - important thing, through which we perform some task. Class may contains methods and variables

Method1 - A work
Method2 - B work
Method3 - C work ( A work + some other work = method1 + some other work)

redundant - repeatable 
reuse

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Variables - shape and count/name
shape - datatype 

Datatype: Its a classification of a data, which tells the compiler or interpretor about how the programmer intends to use the data.

1) Primitive
	a) boolean - yes or no OR true or false 
	b) Textual 
		char - a, b, c, A, B
		byte - 
			byte x = 10;
	c) numeric 
		int 
		short
		double
		long
		float

2) Non Primitive
	d) String 
	e) array

each datatype has a default value

* default value of String is null
* default value of int is 0
* boolean - false

How we declare variable
Syntax = accessModifier dataType variableName/variable = variableValue (non static)
Syntax = accessModifier static dataType variableName/variable = variableValue (static)

int a = 10;  
int a;
a = 10;
String a = "10";
String a; (this line and next line are same)
String a = null; (null is a keyword here, it means String a has nothing.)
String a = "null"; ("null" is a String/word here.)
double a = 10d;
char sathya = 'A';
boolean Boolean = true;

int a; - declare
a = 10; - define/initiate

int a = 10;
int - data type( primitive --> numeric)
a - variable/variableName;
10 - value posses by the variable/ value pointed by the variable
If you want 10, you need to call 'a' only. 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Day 8 - 12/04/2024

Variables - Its a memory location that can hold values of a specific datatype.

Types of variables 
1. Local variable - 
	* Datatype declared/initiated within a method/constructor, for, if    -- block ({...})
	* scope of local variable is only within the block in which the variable is declared
	* intialisation of local variable is madatory
	* local variables can not be static
	{
	int a = 10;
	char c;
	c = 20;
	String sathya = "10";
	static int b = 10; -- we can not create like this.
	}
	
2. Instance variable/class variable/non-static variable
	* Declared within a class but outside of a block ({...})
	* Non- static variables
	* To access instance variables, we need to create object
	
	classA {
	int a = 10; //class level non static variable
	String sathya = "10"; //class level non static variable
	
	method1() {
	int  a = 10; // local variable
	
	sysout(sathya); // we can not use a non static like this. we need to create object
	// it should be written as 
	ClassA obj = new ClassA(); //object creation
	sysout(obj.sathya);
	}
	}
	
	
3. static variable
	* Declared within a class but outside of a block
	* static keyword is used with variables and methods
	* To access this variable, dont need to create an object
	* within a class - static can be used anywhere directly (in a static method or in non-static method)
	* Outside class - static can be used but along with class name. (in a static method or in non-static method)
	
	static int a = 10;
	static String sathya = "10";
	
	ClassA (TalukOffice) {

static int a = 10;
//a = receptionist;

method1() {

print (a);


}

}


ClassB (Govt hospital) {

method2() {
print (ClassA.a);
//print (TalukOffice.receptionist)
}
	
*********************************************************************
	
Access Modifier
	* It defines where and who can use a method/variable/class/interface
	1) default
	2) private
	3) protected
	4) public 
	
	static & final 
	
	Syntax for variable = 		 accessModifier dataType variableName/variable = variableValue
		   				= static accessModifier dataType variableName/variable = variableValue 
	
	int a = 10; - default (no need to mention "default" word)
	private int a = 10;
	protected int a = 10;
	public int a = 10;
	
	
	packageA
		classA ( int a = 10)
			ClassAA extends ClassA (same package and sub class of A)
		classB (same package but non sub class of A)
	packageX
		classX (diff package non sub class of ClassA)
		classXA extends ClassA (diff package but sub class of A)
		
	
How ClassA and other Classes can use variable 'a' based on its access modifier.

                                     | default |  private  | protected  | public 
									 |         |           |            | 
classA ( int a = 10)                 | yes     | yes       | yes        | yes
									 |         |           |            |
same package but sub class           | yes     | no        | yes        | yes 
									 |         |           |            |
same package but non sub class       | yes     | no        | yes        | yes
									 |         |           |            |
different package but sub class      | no      | no        | yes        | yes
									 |         |           |            |
different package but non sub class  | no      | no        | no         | yes

ClassA {

int a = 10;
private int b = 100;
protected int c = 20;
public int d = 15

method1() {
print (a); - No compile time error
print (b);
print (c);
print (d); 
}

}

ClassAA following ClassA {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

ClassB {

ClassA obj = new ClassA();
method1() {
print (obj.a); 
print (obj.b);
print (obj.c);
print (obj.d); 
}
}

******************************************************************
Day 9 - 15/04/2024

* Tell me about yourself
* Tell me about your team
* Tell me about your project
* Day to day work
* Sprint 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JVM, JRE, JDK

our codes - english - .java
compile - .class - byte code (machine recognizable language). 
			it is available in target folder.


JVM - Java Virtual Machine 
* This can not be seen
* it starts the execution(creates Runtime Environment)
* It first checks for main method
* It creates the code flow, in java the flow is called "Thread" 
* JVM provides run time environment in which Java byte codes can be executed
* loads code| verifies code| execute code| provides run time environment

JRE - Java Runtime Environment
* Physically exist
* Contains JVM and set of libraries
* JVM uses these libraries to execute the codes

JDK - Java Developement kit
* It contains JVM, set of libraries and dev tools (JRE + dev tools)
* Used to develop and execute the codes
* Dev tools + debugger + compiler + java doc

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Java keywords
new, class, interface, abstract, access modifiers, data types, static, this, super, throw, throws, try, 
catch, final, finally, data type, if, for, while, break, continue, switch, case;

* dont create variables and method names using java predefined keywords 
* Java is case sensitive language (Sathya, sathya)

Naming conversion in java
* Should not use above things
* homepage - homePage (Camel case)

If you are creating package, package name
* should start with small letter followed by camel case

if you are creating class or interface
* should start with Captial letter followed by camel case

thisIsPackageName 
ThisIsClassName
ThisIsInterfaceName

thisIsMethodName
thisIsObjectName or ThisIsObjectName
thisIsVariableName

package, method, object, variable - starts with small letter
Class, Interface, Object - starts with Capital letter



Syntax

class 

accessModifer class className {

}


e.g: public class GovtHospital {

}


method 

accessModifer static/Non-static returnType methodName() {

}

static/Non-static accessModifer returnType methodName() {

}

public void thisIsNonStaticMethod() {

}

private static void thisIsStaticMethod() {

}

Methods in Java

1) main method (static method)
2) static method
3) non static method

Calling one method from another method

* How calling a method differentiate within a class or outside class

With in a class
1. calling static method/variable from non-static method - direct call
2. calling static method/variable from static method - direct call
3. calling non-static method/variable from non-static method - direct call or object creation
4. calling non-static method/variable from static method - Object creation 


Outside class
	1. calling static method/variable from non static method - using className
	2. calling static method/variable from static method - using className
	3. calling non-static method/variable from non-static method - Creating Object
	4. calling non-static method/variable from static method - Creating Object 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Object creation - to call non-static methods

Within class we can have both static and non-static member. 

1) We create object only for class.
2) In order to access non static members of a class, we create object and access the methods and variables

Objection definition - Whenever we create an Object for a class, whatever non-static members(methods and variables) present in that class 
				will be copied and stored in heap memory. We call non-static members through Object creation only.
				
What is heap memory? 

Memory Management

Heap memory
Stack memory
SCP (String Constant Pool - A part of heap memory)

ClassA obj1 = new ClassA();

ClassA - Class Name
Obj1 - Object variable
new = key word to create obj
ClassA() - Constructor or Object creation or instance creation

* Whenever we create an object for a class, whatever non-static variables and methods present in that class will be copied to heap memory
* Object variable or instance variable, is stored in stack memory 
* We can create multiple object for a single class

public class ClassA {

int a = 10; 

public void method1() {
	ClassA obj1 = new ClassA();
	sysout(obj1.a);
	
	ClassA obj3 = new ClassA();
	ClassA obj4 = new ClassA();
}

public void method2() {
	ClassA obj2 = new ClassA();
	sysout(obj1.a);
}

}

	stack memory			Heap memory
	obj1.				a = 10; method1(), method2();
	obj2				a = 10; method1(), method2();
	obj3				a = 10; method1(), method2(); 
	
	* In heap memory, only one copy of every class is available if you create multiple object 
		for that class. So that we can save the memory space in heap memory.
	
	
public class ClassA {
int a = 10;
}

int a = 10; //class level non static
* a = 10 - When it comes to variable,  the variable and its value, 
				both will be stored in specific stack memory 

SCP:- String constant pool
There are two ways to create String in Java
1. String Literals
2. Object creation

String Literals
	String Sathya = "1000"; 
	
Sathya - Stack
1000 - SCP of Heap memory 
	
Object creation for String
	ClassA obj1 = new ClassA(); //its simple object creation
	String Sathya = new String("1000"); //parameterized object creation

Sathya - Stack memeory
1000 and methods/variables in String class - Heap memory 

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

String immutable:-

String str = "Sathya";
String str1 = "Sathya";
String str2 = "Ranjith";

In Memory it looks like
stack 		SCP
str			Sathya 
str1 		
str2 		Ranjith

str1 = str1 + str2;
str1 = SathyaRanjith

After manipulation what we think
stack 		SCP
str			SathyaRanjith
str1 		
str2 		Ranjith

But what really happens in SCP memory.
Whenever we manipulate String variable, String value never get changed. 
Simply a new value is assigned to the manipulated String variable.

stack 		SCP
str			Sathya
str1 		SathyaRanjith
str2 		Ranjith

str = str1 + str2;

In SCP, after manipulation

stack 		SCP
str			SathyaRanjithRanjith ("Sathya" - will be still available in SCP but no one is looking for him)
str1 		SathyaRanjith
str2 		Ranjith

Unused Object "Sathya" in the memory will be cleared after sometime by Java Garbage collection process

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Data types as variables:-
Variables in Java

Based on where we create our data types or variable names, we categories variables in 3 types 

1. Local variable
2. Class level or instance variable or non-static variable
3. static variable

****************************************************************************************
Day 10 - 16/04/2024

Methods in Java
1) method without return type //public void 
2) method with return type //public int
3) static method // public static
4) non static method // public void/int
5) parameterized method // public static/non-static void/any methodName(datatype variableName)
6) Non parameterized method public static/non-static void/any methodName()

METHODS CAN BE:
135 // public static void methodName(datatype variableName)
136 // public static void methodName()
145 // public non-static void methodName(datatype variableName)
146 // public non-static void methodName()
235 // public static RETURNTYPE methodName(datatype variableName)
236 // public static RETURNTYPE methodName()
245 // public non-static RETURNTYPE methodName(datatype variableName)
246 // public non-static RETURNTYPE methodName()

************************************************************

Day 11 - 19/04/2024

Return type in detail

***************************************************************

Note: teach final keyword and how we use it in a Class

Day 12 - 21/04/2024

interfaceInJava

1) method with body  (Concrete method)
2) method without body 

Methods starts with { and ends with }

Method with body or concrete method 
Ex: public void method1() {

}

Methods can be without body or bodyless method or abstract method
Ex: public void method1();

*********************************************************************

Day 13 - 23/04/2024

* Interface examples -> WebDriver, WebElement, List
* Interface as a return type --> List<WebElement> findElements(By by))
* Class as a parameter  --> findElement(By by) ;

driver.findElement(By.id("text")).click();

WebElement.click();


driver.findElement(By.xpath("")).isSelected();

WebElement(Gender checkbox).isSelected();


driver.switchTo().window(); //TargetLocator.window();
driver.switchTo().alert();
driver.switchTo().frame();



driver.switchTo().alert().accept();


TargetLocator.alert().accept();

Alert.accept();

Alert alert = driver.switchTo().alert();
alert.accept():


TargetLocator var = driver.switchTo();
Alert alert = var.alert();
alert.accept();

TargetLocator var = driver.switchTo();
Alert alert = var.alert();
String str = alert.getText();
syso(str); --> No benefits selected

driver.switchTo().alert().getText();


driver.switchTo().alert().accept();


public int method1() {

}

int variableName = obj.method1();

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


Abstract class  in detail


*&&&&&&&&&&&&&&&&&&&&&&&&&&&

Whenever you study a new concept, in that concept include previously studied concepts

If you are studying abstract class, then in that concept, you need check how the below things works
Variables
methods (static or non static / parameterized or not / with or without return type)
Object 
Interface


*************************************************************

Day 14 - 27/04/2024

Inheritance in detail
Polymorphism in detail
	* Method overload or compile time polymorphism
	* Method override or run time polymorphism
	
*************************************************************

Day 15 - 28/04/2024

Constructors in detail 
this() and super().

*************************************************************

Day 16 - 30/04/2024

Keywords in java
   this
   super
   final
   static

*************************************************************
Day 17 - 01/05/2024

Errors and Exceptions 

try catch finally

*************************************************************
Day 18 - 07/05/2024

Throw, Throws, Throwable

************************************************************

Day 19 - 09/05/2024

1) 
if(hasHamamSoap) --> Yes or not

yes - buy Hamam soap
No - return to home


2) 
if(hasHamamSoap) --> Yes or not

yes - buy Hamam soap
No - return to home

if(hasLuxSoap) --> Yes or not

yes - buy Lux soap
No - return to home

3) 
if(hasHamamSoap) --> Yes 

yes - buy Hamam soap

No - buy Lux soap

else
	buy Lux Soap
	

4) 
if(hasHamamSoap) --> Yes or no

yes - buy Hamam soap


else 
if(hasCintholSoap) --> Yes or no

yes - buy Cinthol soap

else 
	buy any Soap or buy Lux soap
	
5) 

if(hasHamamSoap) --> Yes or no
	
	if(has10RupeesHamamSoap) --> Yes or no
	if(has20RupeesHamamSoap) --> Yes or no
	
6) 

if(hasHamamSoap) --> Yes or no

	if(has10RupeesHamamSoap) --> Yes or no
	else 
	buy any amount soap
	
7) 
if(hasHamamSoap) --> Yes or no

	if(has10RupeesHamamSoap) --> Yes or no
	else
	if(has20RupeesHamamSoap) --> Yes or no
	else 
	buy any amount soap


8) 

if(hasHamamSoap && has10RupeesHamamSoap) --> Yes or no
	both condition has to pass - then enter the shop
	
9)

if(hasHamamSoap || hasLuxSoap) --> Yes or no
	any one condition pas pass - then enter the shop

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
1) 
if(condition) {
	line1
	line2
	}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
if(condition) 
	line1 - belongs if condition
	line2
	

2) 
if(condition) {

}
if(condition) {

}

3)
if(condition) {

}

else {

}

4) 

if(condition) {

}

else 
if (condition) {

}

else {

}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

if(condition), where condition - should return boolean(true or false)
Conditional operators  
10 == 20 ; = assignment operator
10 != 20
10 > 20
10 < 20
10 <= 20
10 >= 20

int a = 10;
int b = 20;
if(a>b) {

}

public int method1() {

return 10;
}

if(10 != method1()) {

}
-----------------------------------------------


condition only

==
>
<
!=


if

if 
if 
if

if
else 


if
else if 
else if
else 


---------------------------

multiple condition


&&
|| 


if(condition1 || condition2) {content }
if(condition1 && condition2) {content }
if(condition1 && (condition2 || condition3)) {content }







if(soap available == yes)
	doing some other work
	if(soap name == yes)
	doing some other work
		if(soap amount is 10 == yes)
			buy soap

if(soap available == yes && soap name == yes && soap amount is 10 == yes) 
	buy soap



if(condition) {
line1
line2
line3
}

if(condition) 
line1
line2
line3


****************************************************************************

Day 20 - 10/05/2024

For loop

For loop with continue and break

debug and break points

***************************************************************************

Day 21 - 11/05/2024

switch

doWhile 

while

***************************************************************************

Day 22 - 13/05/2024

array basics

iterating an array

writing a dynamic method to iterating an array

****************************************************************************

Day 23 - 15/05/2024

For Each 
getter and setter 

************************************************************

****************************************************************************

Day 24 - 16/05/2024

Scanner

****************************************************************************

Day 25 - 17/05/2024

array practice

****************************************************************************
Day 26 - 18/05/2024

array practice

****************************************************************************
Day 27 - 20/05/2024

Arrays class practice and explanation

Home work: 
try these methods yourself 

equals
compare
mismatch
copyOf
copyOfRanga

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Multi-Dimential array 

Matrix 
2* 2 - 2 row and 2 column

10 20
30 40

0,0 - 10
0,1 - 20
1,0 - 30
1,1 - 40

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

String class demo

******************************************************************************
String practice and explanation


"" - empty
"  " - blank
"a" 
"4343"
"Sathya"
"fsjkf lkdsdk ld;l";
"Selenium written on \"Java\" language as well"

==

String str = "abc"; //String litrals 
String str1 = "abc";

if(str == str1) // false
if(str.equals(str1)) - true

check given word is present in the sentence

String immutable


****************************************************************************


